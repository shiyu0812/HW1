#include <iostream>

int ack_rec(int m, int n) {
    if (m == 0) {
        return n + 1;
    } else if (m > 0 && n == 0) {
        return ack_rec(m - 1, 1);
    } else {
        return ack_rec(m - 1, ack_rec(m, n - 1));
    }
}


const int MAXSIZE = 10000;

struct StackFrame {
    int m;
    int n;
};

int ack_no_rec(int m, int n) {
    StackFrame stack[MAXSIZE];
    int top = 0;
    stack[top++] = {m, n};

    while (top > 0) {
        StackFrame &frame = stack[--top];
        m = frame.m;
        n = frame.n;

        if (m == 0) {
            if (top > 0) {
                stack[top - 1].n = n + 1;
            } else {
                return n + 1;
            }
        } else if (n == 0) {
            stack[top++] = {m - 1, 1};
        } else {
            stack[top++] = {m - 1, -1}; // Mark the point to return with the result
            stack[top++] = {m, n - 1};
        }

        // Handle the point where we need to use the result from previous computation
        while (top > 0 && stack[top - 1].n == -1) {
            --top;
            n = stack[top].n;
            stack[top - 1].n = ack_no_rec(stack[top - 1].m, n);
        }
    }

    return n;
}

int main() {
    int m = 2;
    int n = 3;

    
    std::cout << "Recursive Ackermann(" << m << ", " << n << ") = " << ack_rec(m, n) << std::endl;

    
    std::cout << "Non-recursive Ackermann(" << m << ", " << n << ") = " << ack_no_rec(m, n) << std::endl;

    return 0;
}
